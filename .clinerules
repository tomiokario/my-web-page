# 開発ルール

## セキュリティ

### 機密ファイル

以下のファイルの読み取りと変更を禁止：

-   .env ファイル
-   APIキー、トークン、認証情報を含むすべてのファイル

### セキュリティ対策

-   機密ファイルを絶対にコミットしない
-   シークレット情報は環境変数を使用する
-   ログや出力に認証情報を含めない

## テストの利用

### 基本原則

-   仕様が明確に固まっている場合にはテストファーストを徹底する
-   仕様が不明確な場合は、まずは実装を行い、その後にテストを追加する
-   テストは常に最新の状態を保つ
-   小さなステップで進める
-   リファクタリングを怠らない

### テストコード規約

-   テストファイルは `src/__tests__` ディレクトリに配置する
-   テストファイルは `.test.jsx` または `.test.js` の拡張子を使用する
-   テスト名は「何をテストしているか」が明確にわかるように記述する
-   AAA（Arrange-Act-Assert）パターンに従ってテストを記述する
-   ユーザー視点でテストを書く
-   実装の詳細ではなく、動作をテストする
-   モックは必要最小限に留める
-   テストは独立していて、他のテストに依存しないようにする

## コーディング規約

-   ESLint/Prettier の標準的なルールに準拠
-   Reactの関数コンポーネントを使用
-   Mantineコンポーネントライブラリを活用したUI設計
-   関数やコンポーネントには適切なコメントを含める
-   言語設定（ja/en）に応じて、適切な言語でコンテンツを表示する
-   コンポーネントは責務を明確に分離する
-   再利用可能なコードはユーティリティ関数として抽出する

## データ管理

-   出版物データは CSV から JSON への変換プロセスを通じて管理する
-   csvファイルは元データであるため直接編集せず、jsonファイルの作成にはスクリプトを用いる

## 多言語対応

-   `LanguageContext`を使用して言語状態を管理する
-   ユーザーの言語設定はlocalStorageに保存する
-   `locales`ディレクトリ内の言語ファイル（ja.js, en.js）を使用して翻訳を管理する
-   コンポーネント内では`useLanguage`フックを使用して現在の言語を取得する

## ドキュメント

-   コードの変更に伴い、必要に応じてドキュメントと.clinerulesを更新する
-   新機能の追加時は、対応するテストとドキュメントを作成する
-   複雑なロジックには、コメントでその意図と動作を説明する
